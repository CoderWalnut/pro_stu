/*
一、运算符重载(operator overloading), 就是对已有的运算符重新进行定义, 赋予其另一种功能, 以适应不同的数据类型;
运算符重载只是一种"语法上的方便", 它只是另一种函数调用的方式.

语法: 定义重载的运算符就像定义函数, 只是该函数的名字是 operator@, 这里的@代表被重载的运算符;

只有在能使涉及类的代码更易写, 尤其是更易读时(读代码的机会比写代码多)才有理由重载运算符, 如果不是这样, 就改用其他更易用, 更易读的方式.
对于内置的数据类型的表达式的的运算符是不可能改变的(例如, 重载 int 类型数据的 + 号)

二、可重载的运算符
    双目算数运算符: +  -  *  /  %
    关系运算符: ==  !=  <  >  <=  >=
    逻辑运算符: ||  && !
    单目运算符: +  -  *  &
    自增自减运算符: ++  --
    位运算符: |  &  ~  ^  <<  >>
    赋值运算符: =  +=  -=  *=  /=  %=  &=  |=  ^=  <<=  >>=
    空间申请与释放: new  delete  new[]  delete[]
    其他运算符: ()(函数调用), ->(成员访问), ,(逗号), [](下标)

三、不可重载的运算符
    .(成员访问运算符)
    .*  ->*  (成员指针访问运算符)
    ::(域运算符)
    sizeof
    ?:
    #(预处理符号)

四、运算符重载总结
 <<  >> 只能通过全局函数配合友元进行重载, 其余的运算符建议都通过成员函数重载
 不要重载 && 和 || , 因为无法实现短路规则.
*/